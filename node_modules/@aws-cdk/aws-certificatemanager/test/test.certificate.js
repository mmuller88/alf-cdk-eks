"use strict";
const assert_1 = require("@aws-cdk/assert");
const route53 = require("@aws-cdk/aws-route53");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
module.exports = {
    'apex domain selection by default'(test) {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [{
                    DomainName: 'test.example.com',
                    ValidationDomain: 'example.com',
                }],
        }));
        test.done();
    },
    'validation domain can be overridden'(test) {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validationDomains: {
                'test.example.com': 'test.example.com',
            },
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CertificateManager::Certificate', {
            DomainValidationOptions: [{
                    DomainName: 'test.example.com',
                    ValidationDomain: 'test.example.com',
                }],
        }));
        test.done();
    },
    'export and import'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const c = lib_1.Certificate.fromCertificateArn(stack, 'Imported', 'cert-arn');
        // THEN
        test.deepEqual(c.certificateArn, 'cert-arn');
        test.done();
    },
    'can configure validation method'(test) {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validationMethod: lib_1.ValidationMethod.DNS,
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            ValidationMethod: 'DNS',
        }));
        test.done();
    },
    'needs validation domain supplied if domain contains a token'(test) {
        const stack = new core_1.Stack();
        test.throws(() => {
            const domainName = core_1.Lazy.stringValue({ produce: () => 'example.com' });
            new lib_1.Certificate(stack, 'Certificate', {
                domainName,
            });
        }, /'validationDomains' needs to be supplied/);
        test.done();
    },
    'validationdomains can be given for a Token'(test) {
        const stack = new core_1.Stack();
        const domainName = core_1.Lazy.stringValue({ produce: () => 'my.example.com' });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName,
            validationDomains: {
                [domainName]: 'example.com',
            },
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'my.example.com',
            DomainValidationOptions: [{
                    DomainName: 'my.example.com',
                    ValidationDomain: 'example.com',
                }],
        }));
        test.done();
    },
    'CertificateValidation.fromEmail'(test) {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            subjectAlternativeNames: ['extra.example.com'],
            validation: lib_1.CertificateValidation.fromEmail({
                'test.example.com': 'example.com',
            }),
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            SubjectAlternativeNames: ['extra.example.com'],
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    ValidationDomain: 'example.com',
                },
                {
                    DomainName: 'extra.example.com',
                    ValidationDomain: 'example.com',
                },
            ],
            ValidationMethod: 'EMAIL',
        }));
        test.done();
    },
    'CertificateValidation.fromDns'(test) {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            subjectAlternativeNames: ['extra.example.com'],
            validation: lib_1.CertificateValidation.fromDns(),
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            SubjectAlternativeNames: ['extra.example.com'],
            ValidationMethod: 'DNS',
        }));
        test.done();
    },
    'CertificateValidation.fromDns with hosted zone'(test) {
        const stack = new core_1.Stack();
        const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
            zoneName: 'example.com',
        });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validation: lib_1.CertificateValidation.fromDns(exampleCom),
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        }));
        test.done();
    },
    'CertificateValidation.fromDnsMultiZone'(test) {
        const stack = new core_1.Stack();
        const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
            zoneName: 'example.com',
        });
        const exampleNet = new route53.HostedZone(stack, 'ExampleNet', {
            zoneName: 'example.com',
        });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            subjectAlternativeNames: ['cool.example.com', 'test.example.net'],
            validation: lib_1.CertificateValidation.fromDnsMultiZone({
                'test.example.com': exampleCom,
                'cool.example.com': exampleCom,
                'test.example.net': exampleNet,
            }),
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
                {
                    DomainName: 'cool.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
                {
                    DomainName: 'test.example.net',
                    HostedZoneId: {
                        Ref: 'ExampleNetF7CA40C9',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,