"use strict";
const assert_1 = require("@aws-cdk/assert");
const core_1 = require("@aws-cdk/core");
const eks = require("../lib");
const k8s_patch_1 = require("../lib/k8s-patch");
const CLUSTER_VERSION = eks.KubernetesVersion.V1_16;
module.exports = {
    'applies a patch to k8s'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const cluster = new eks.Cluster(stack, 'MyCluster', { version: CLUSTER_VERSION });
        // WHEN
        new k8s_patch_1.KubernetesPatch(stack, 'MyPatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'myResourceName',
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('Custom::AWSCDK-EKS-KubernetesPatch', {
            ServiceToken: {
                'Fn::GetAtt': [
                    'awscdkawseksKubectlProviderNestedStackawscdkawseksKubectlProviderNestedStackResourceA7AEBA6B',
                    'Outputs.awscdkawseksKubectlProviderframeworkonEvent0A650005Arn',
                ],
            },
            ResourceName: 'myResourceName',
            ResourceNamespace: 'default',
            ApplyPatchJson: '{"patch":{"to":"apply"}}',
            RestorePatchJson: '{"restore":{"patch":123}}',
            ClusterName: {
                Ref: 'MyCluster8AD82BF8',
            },
            RoleArn: {
                'Fn::GetAtt': [
                    'MyClusterCreationRoleB5FA4FF3',
                    'Arn',
                ],
            },
        }));
        test.done();
    },
    'defaults to "strategic" patch type if no patchType is specified'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const cluster = new eks.Cluster(stack, 'MyCluster', { version: CLUSTER_VERSION });
        // WHEN
        new k8s_patch_1.KubernetesPatch(stack, 'MyPatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'myResourceName',
        });
        assert_1.expect(stack).to(assert_1.haveResource('Custom::AWSCDK-EKS-KubernetesPatch', {
            PatchType: 'strategic',
        }));
        test.done();
    },
    'uses specified to patch type if specified'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const cluster = new eks.Cluster(stack, 'MyCluster', { version: CLUSTER_VERSION });
        // WHEN
        new k8s_patch_1.KubernetesPatch(stack, 'jsonPatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'jsonPatchResource',
            patchType: k8s_patch_1.PatchType.JSON,
        });
        new k8s_patch_1.KubernetesPatch(stack, 'mergePatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'mergePatchResource',
            patchType: k8s_patch_1.PatchType.MERGE,
        });
        new k8s_patch_1.KubernetesPatch(stack, 'strategicPatch', {
            cluster,
            applyPatch: { patch: { to: 'apply' } },
            restorePatch: { restore: { patch: 123 } },
            resourceName: 'strategicPatchResource',
            patchType: k8s_patch_1.PatchType.STRATEGIC,
        });
        assert_1.expect(stack).to(assert_1.haveResource('Custom::AWSCDK-EKS-KubernetesPatch', {
            ResourceName: 'jsonPatchResource',
            PatchType: 'json',
        }));
        assert_1.expect(stack).to(assert_1.haveResource('Custom::AWSCDK-EKS-KubernetesPatch', {
            ResourceName: 'mergePatchResource',
            PatchType: 'merge',
        }));
        assert_1.expect(stack).to(assert_1.haveResource('Custom::AWSCDK-EKS-KubernetesPatch', {
            ResourceName: 'strategicPatchResource',
            PatchType: 'strategic',
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,